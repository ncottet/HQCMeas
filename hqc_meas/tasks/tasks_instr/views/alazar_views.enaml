# -*- coding: utf-8 -*-
#==============================================================================
# module : psa_tasks-views.py
# author : Benjamin Huard & SÃ©bastien Jezouin
# license : MIT license
#==============================================================================
from enaml.core.api import Conditional, Include
from enaml.widgets.api import (GroupBox, Label, Field, ObjectCombo, CheckBox, Container)
from enaml.layout.api import grid, vbox, hbox, factory

from inspect import cleandoc
from textwrap import fill

from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter
from hqc_meas.utils.layouts import auto_grid_layout
from hqc_meas.tasks.views.base_instr_view import BaseInstrumentView
from hqc_meas.tasks.tools.string_evaluation import EVALUATER_TOOLTIP



enamldef DemodAlazarView(BaseInstrumentView): view:

#    attr in_loop : bool = False
    title << task.task_name
    constraints = [vbox(
                    grid([sel_driv, sel_prof, traces, buffer, average],
                         [sel_val, prof_val, traces_val, buffer_val, average_val]),
                    hbox(demodA,demodB),
                    hbox(traceA,traceB)),
                    traces_val.width == buffer_val.width,
                    demodA.width == demodB.width,
                    traceA.width == traceB.width]

    Label: sel_driv:
        text = 'Driver'
    ObjectCombo: sel_val:
        items << sorted(drivers)
        selected := task.selected_driver

    Label: sel_prof:
        text = 'Instr'
    ObjectCombo: prof_val:
        items << sorted(profiles)
        selected := task.selected_profile    

    Label: traces:
        text = 'Number of traces'
    Field: traces_val:
        text := task.tracesnumber
        
    Label: buffer:
        text = 'Traces per Buffer'
    Field: buffer_val:
        text := task.tracesbuffer
        
    Label: average:
        text = 'Average'
    CheckBox: average_val:
        checked := task.average

    GroupBox: demodA:
        title = 'Channel A demodulation settings'
        constraints = [grid([after, duration, dfreq, samplingtime],
                            [after_val, duration_val, dfreq_val, samplingtime_val]),
                       dfreq_val.width == after_val.width,
                       after_val.width == duration_val.width]                
        Label: dfreq:
            text = 'Demodulation frequency (MHz)'
        Field: dfreq_val:
            text := task.freq
            tool_tip = fill(cleandoc(
                            '''Separate the demodulation frequencies with commas or enter a Python formula.
                            ---- You can specify a unique demodulation frequency if it's the same for every demodulation.'''))
         
        Label: after:
            text = 'Start time after trigger (ns)'
        Field: after_val:
            text := task.timeaftertrig
            tool_tip = fill(cleandoc('''Separate the start times with commas or enter a Python formula.
                                        For example : 0,500,1500 or np.linspace(0,1500,3)'''))
        
        Label: duration:
            text = 'Duration (ns)'
        Field: duration_val:
            text := task.duration
            tool_tip = fill(cleandoc(
                            '''Separate the durations with commas or enter a Python formula. Demodulation
                            on channel A will be disabled if one of the
                            durations is set to zero.
                            ---- Note that data acquisition by channel A will be
                            disabled if demodulation and trace record are both
                            disabled on this channel. This improves channel B speed.'''))
                            
        Label: samplingtime:
            text = 'IQ time step (ns)'
        Field: samplingtime_val:
            text := task.timestep
            tool_tip = fill(cleandoc(
                            '''Acquire the IQ values with temporal resolution. 
                            Separate the time steps with commas or enter a Python formula.
                            --- You can specify a unique time step if it's the same for every demodulation.
                            --- 0 corresponds to one IQ per trace.'''))
    GroupBox: demodB:
        title = 'Channel B demodulation settings'  
        constraints = [grid([afterB, durationB, dfreqB, samplingtimeB],
                            [afterB_val, durationB_val, dfreqB_val, samplingtimeB_val]),
                       dfreqB_val.width == afterB_val.width,
                       afterB_val.width == durationB_val.width]                 
        Label: dfreqB:
            text = 'Demodulation frequency (MHz)'
        Field: dfreqB_val:
            text := task.freqB
            tool_tip = fill(cleandoc(
                            '''Separate the demodulation frequencies with commas or enter a Python formula.
                            ---- You can specify a unique demodulation frequency if it's the same for every demodulation.'''))
         
        Label: afterB:
            text = 'Start time after trigger (ns)'
        Field: afterB_val:
            text := task.timeaftertrigB
            tool_tip = fill(cleandoc('''Separate the start times with commas or enter a Python formula.
                                        For example : 0,500,1500 or np.linspace(0,1500,3)'''))
        
        Label: durationB:
            text = 'Duration (ns)'
        Field: durationB_val:
            text := task.durationB
            tool_tip = fill(cleandoc(
                            '''Separate the durations with commas or enter a Python formula. Demodulation
                            on channel B will be disabled if one of the
                            durations is set to zero.
                            ---- Note that data acquisition by channel B will be
                            disabled if demodulation and trace record are both
                            disabled on this channel. This improves channel A speed.'''))
                            
        Label: samplingtimeB:
            text = 'IQ time step (ns)'
        Field: samplingtimeB_val:
            text := task.timestepB
            tool_tip = fill(cleandoc(
                            '''Acquire the IQ values with temporal resolution. 
                            Separate the time steps with commas or enter a Python formula.
                            --- You can specify a unique time step if it's the same for every demodulation.
                            --- 0 corresponds to one IQ per trace.'''))

    GroupBox: traceA:
        title = 'Channel A raw trace record settings'
        constraints = [grid([traceafter, traceduration],
                            [traceafter_val, traceduration_val]),
                       traceafter_val.width == traceduration_val.width]                

        Label: traceafter:
            text = 'Start time after trigger (ns)'
        Field: traceafter_val:
            text := task.tracetimeaftertrig
            tool_tip = fill(cleandoc('''Separate the start times with commas or enter a Python formula.
                                        For example : 0,500,1500 or np.linspace(0,1500,3)'''))
        
        Label: traceduration:
            text = 'Duration (ns)'
        Field: traceduration_val:
            text := task.traceduration
            tool_tip = fill(cleandoc(
                            '''Separate the durations with commas or enter a Python formula. Trace record
                            on channel A will be disabled if one of the
                            durations is set to zero.
                            ---- Note that data acquisition by channel A will be
                            disabled if demodulation and trace record are both
                            disabled on this channel. This improves channel B speed.'''))
    GroupBox: traceB:
        title = 'Channel B raw trace record settings'  
        constraints = [grid([traceafterB, tracedurationB],
                            [traceafterB_val, tracedurationB_val]),
                       traceafterB_val.width == tracedurationB_val.width]                 

        Label: traceafterB:
            text = 'Start time after trigger (ns)'
        Field: traceafterB_val:
            text := task.tracetimeaftertrigB
            tool_tip = fill(cleandoc('''Separate the start times with commas or enter a Python formula.
                                        For example : 0,500,1500 or np.linspace(0,1500,3)'''))
        
        Label: tracedurationB:
            text = 'Duration (ns)'
        Field: tracedurationB_val:
            text := task.tracedurationB
            tool_tip = fill(cleandoc(
                            '''Separate the durations with commas or enter a Python formula. Trace record
                            on channel B will be disabled if one of the
                            durations is set to zero.
                            ---- Note that data acquisition by channel B will be
                            disabled if demodulation and trace record are both
                            disabled on this channel. This improves channel A speed.'''))


enamldef TracesAlazarView(BaseInstrumentView): view:

    attr in_loop : bool = False
    title << task.task_name
    constraints = [factory(auto_grid_layout),
                           traces_val.width == after_val.width,
                           traces_val.width == buffer_val.width]


    Label: sel_driv:
        text = 'Driver'
    ObjectCombo: sel_val:
        items << sorted(drivers)
        selected := task.selected_driver

    Label: sel_prof:
        text = 'Instr'
    ObjectCombo: prof_val:
        items << sorted(profiles)
        selected := task.selected_profile

    Label: after:
        text = 'Time after trigger (mus)'
    Field: after_val:
        text := task.timeaftertrig

    Label: traces:
        text = 'Number of traces'
    Field: traces_val:
        text := task.tracesnumber
        
    Label: buffer:
        text = 'Traces per Buffer'
    Field: buffer_val:
        text := task.tracesbuffer
        
    Label: average:
        text = 'Average'
    CheckBox: average_val:
        checked := task.average

enamldef PhaseAlazarView(BaseInstrumentView): view:

#    attr in_loop : bool = False
    title << task.task_name
    constraints = [vbox(
                    grid([sel_driv, sel_prof, traces, buffer, average, points],
                         [sel_val, prof_val, traces_val, buffer_val, average_val, points_val]),
                    hbox(demod)),
                    traces_val.width == buffer_val.width]

    Label: sel_driv:
        text = 'Driver'
    ObjectCombo: sel_val:
        items << sorted(drivers)
        selected := task.selected_driver

    Label: sel_prof:
        text = 'Instr'
    ObjectCombo: prof_val:
        items << sorted(profiles)
        selected := task.selected_profile    

    Label: traces:
        text = 'Number of traces'
    Field: traces_val:
        text := task.tracesnumber
        
    Label: buffer:
        text = 'Traces per Buffer'
    Field: buffer_val:
        text := task.tracesbuffer
        
    Label: average:
        text = 'Average'
    CheckBox: average_val:
        checked := task.average
        
    Label: points:
        text = 'Number of points'
    QtLineCompleter: points_val:
        text := task.Npoints
        entries_updater << task.accessible_database_entries

    GroupBox: demod:
        title = 'Demodulation settings'
        constraints = [grid([after, duration, dfreq, decimation],
                            [after_val, duration_val, dfreq_val, decimation_val]),
                       dfreq_val.width == after_val.width,
                       after_val.width == duration_val.width,
                       duration_val.width == decimation_val.width]                
        Label: dfreq:
            text = 'Demodulation frequency (MHz)'
        Field: dfreq_val:
            text := task.freq
            tool_tip = fill(cleandoc(
                            '''Separate the demodulation frequencies with commas or enter a Python formula.
                            ---- You can specify a unique demodulation frequency if it's the same for every demodulation.'''))
         
        Label: after:
            text = 'Start time after trigger (ns)'
        Field: after_val:
            text := task.timeaftertrig
            tool_tip = fill(cleandoc('''Separate the start times with commas or enter a Python formula.
                                        For example : 0,500,1500 or np.linspace(0,1500,3)'''))
        
        Label: duration:
            text = 'Duration (ns)'
        Field: duration_val:
            text := task.duration
            tool_tip = fill(cleandoc(
                            '''Separate the durations with commas or enter a Python formula'''))
                            
        Label: decimation:
            text = 'Decimation'
        Field: decimation_val:
            text := task.decimation
            tool_tip = fill(cleandoc(
                            '''Card decimation. Must be either 1, 2, 4 or a multiple of 10 up to 100000'''))
                            
TASK_VIEW_MAPPING = {'DemodAlazarTask': DemodAlazarView,
                     'TracesAlazarTask': TracesAlazarView,
                     'PhaseAlazarTask': PhaseAlazarView}
